/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package getfast;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.imageio.ImageIO;
import java.util.Random;
/**
 *
 * @author Jimin Wen
 * The penal used in the special mode. Displaying of enemies and operation in the game is relevant to this class.
 */
public class Specialpenal extends javax.swing.JPanel {

   
    /**
     * Creates new form Specialpenal
     */
    int mark=0;
    int number=1;
    int firemode=0;
    int x;
    int y;
    private BufferedImage enemy;
    private BufferedImage fire;
    private BufferedImage gun;
    public Specialpenal() {
        initComponents();
        try 
        {
            enemy=ImageIO.read(getClass().getResourceAsStream("res/gundam.png"));
            fire=ImageIO.read(getClass().getResourceAsStream("res/fire.png"));
            gun=ImageIO.read(getClass().getResourceAsStream("res/gunsight.png"));
        }
        catch(IOException e)
        { 
        e.printStackTrace();
        }
        intialgundam();
        repaint();
       
         
    }

    /**
     * Drawing the enemies, the gunsight, the fire when shooting in the penal. 
     * @param g 
     */
    public void paint(Graphics g)
    {
        int i;
        if (laser<10)
        {    
        //g.drawLine(array[laser].x+30, array[laser].y+30, 600, 400);
            
        }
      //  g.setColor(Color.blue);
       //g.set
        //g.drawLine(30, 30, 600, 400);
        g.drawImage(gun, x-50,y-50, gun.getWidth(), gun.getHeight(), null);
        for(i=0;i<number;i+=1)
        { 
        //  System.out.println("x="+array[i].x);
         // System.out.println("y="+array[i].y);
          g.drawImage(enemy, array[i].x, array[i].y, enemy.getWidth(), enemy.getHeight(), null);
        }
        if (firemode==1)
        {
          g.drawImage(fire, x-30, y-30, fire.getWidth(), fire.getHeight(), null);
          
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
/**
 * Event when the user has clicked mouse. 
 * Whether an enemy has been shooted is judged.There are sound effect, mark increasing and elimation of an enemy if one enemy has been shooted
 * @param evt 
 */
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
    x=evt.getX();
    y=evt.getY();
    firemode=1;
    int i;
    for (i=0;i<number;i+=1)
    {
        if ((x>array[i].x)&&(x<array[i].x+163)&&(y>array[i].y)&&(y<array[i].y+136))
        { 
            reduce(i);
            mark+=10;
            Sound.Sound3.play();
        }
    }
    repaint();
    }//GEN-LAST:event_formMousePressed
/**
 * Refresh the gunsight in the screen
 * @param evt 
 */
    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
    x=evt.getX();
    y=evt.getY();
    repaint();// TODO add your handling code here:
    }//GEN-LAST:event_formMouseMoved

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
    firemode=0;
    repaint();// TODO add your handling code here:
    }//GEN-LAST:event_formMouseReleased

/**
 * A class to manage the property and behavior of a gundam
 */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
   public class gundam
    {   
        private int id=0;
        public int x=0;
        public int y=0;
        public int time;
        
        Random rand=new Random();
        public gundam()
        { 
         
          x=rand.nextInt(1200);
          y=rand.nextInt(500);
          time=3;
          
        }
        public gundam(int i)
        { 
          x=rand.nextInt(1200);
          y=rand.nextInt(500);
          time=3;
          id=i;
        }
        
    }
    gundam []array=new gundam[10];
    public int laser=10;
    public int getmark()
    { 
      return mark;
    }    
    public void intialgundam()
    {
        int i;
        for (i=0;i<number;i+=1)
        {
            array[i]=new gundam(i);
        }
    }
    /**
     * Add a new gundam in the screen
     */
    public void addgundam()
    {
       if (number<=9)
       {
        number+=1;
    
        array[number-1]=new gundam(number-1);
        repaint();
       }
    }
    /**
     * Check whether a gundam should attack the player
     * @param h
     * @return 
     */
    public int check(int h)
    {   
        int i;
        for(i=0;i<number;i+=1)
        {
            array[i].time-=1;
            if (array[i].time==0)
            {
                h-=10;
                laser=i;
            }
        }
            return h;
    }
    /**
     * Elimate a gundam from the screen
     * @param m 
     */
    public void reduce(int m)
    {   
        int i;
        
        if (m<number-1)
        {    
        for (i=m;i<=number-2;i+=1)
        {   
            array[i].id=array[i+1].id;
            array[i].x=array[i+1].x;
            array[i].y=array[i+1].y;
            array[i].time=array[i+1].time;
        }
        }
        number-=1;
        
        repaint();
    }
}

